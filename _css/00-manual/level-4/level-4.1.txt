.
.
css - Positioning and Layout.
.
.
- level 4.01 - The display Property (display: block/inline)
- level 4.02 - The visibility Property
- level 4.03 - Positioning
- level 4.04 - Positioning - Static Positioning
- level 4.05 - Positioning - Fixed Positioning
- level 4.06 - Positioning - Relative Positioning
- level 4.07 - Positioning - Absolute Positioning
- level 4.08 - Positioning - sticky Positioning
- level 4.09 - Positioning - Floating
- level 4.10 - Positioning - Floating - Clearing the Float
.
.
- level 4.01 - The display Property (display: block/inline)
.

- display: block

-- Every element on a web page is a rectangular box.
   "display" property determines how that rectangular box behaves/displayed. 
   "block" element is an element that takes up the fullest width available, 
   with line breaks before and after.


--- example: <span> elements as block-level elements:

    span 
    {
        display: block;
    }


--- example: <span> elements as block-level elements:
    <css-4.01.1.html>



- display: inline

An inline element only takes up as much width as necessary, 
and does not force line breaks.

--- example: display: inline

    p 
    {
        display: inline;
    }


--- example: display: inline
    <css-4.01.2.html>

-!- Setting the display property of an element only changes how the element is displayed, 
    not what kind of element it is. 
    an inline element with display:block is not allowed to have other block elements inside it.



- display:none

-- display:none hides an element, so it does not take up any space. 
   The element will be hidden, and the page will be displayed as if the element is not there.

--- example: display: none

    h1 
    {
        display: none;
    }


--- example: display: none
    <css-4.01.3.html>

-!- There are display values, such as 
   list-item, table, table-cell, table-column, grid, etc. 

--- link:
    < https://devdocs.io/css/display > 
.
.
- level 4.02 - The visibility Property
.

- The visibility property specifies whether an element is visible or hidden. 
  The most common values are visible and hidden. 

-- Hiding an element can be done by setting the 
   display property to "none" 
   or the visibility property to "hidden". 



-- visibility:hidden -  
   hides an element, but it will still take up the same space (as before).

--- example: visibility: "hidden"
    .hide {
        visibility: hidden;
    }

--- example: visibility: "hidden"
    <css-4.02.1.html>



-- display:none -
   hides an element, without holding a place for that element. 

--- example: display:none


--- example: display:none
    <css-4.02.2.html>
.
.
- level 4.03 - Positioning
.

- The position property specifies the type of positioning method used for an element
 (static, relative, fixed, absolute or sticky).

- position values properties:
-- static
-- fixed
-- relative
-- absolute
-- sticky

- Elements are then positioned by using the properties:
-- top property
-- bottom property
-- left property
-- right property
-!- these properties will not work unless the position property is set first.
-!- They work differently depending on the position value properties.

-- The CSS positioning properties allow you to position an element. 
   It can also place an element behind another, 
   and specify what should happen when an element's content is too big.
.
.
- level 4.04 - Positioning - Static Positioning
.

-- HTML elements are positioned static by default. 
   A static positioned element is always positioned according to the normal flow of the page.

--- example: "Static" Positioning
    position: static;


--- example: Static Positioning
    <css-4.04.1.html>
    <css-4.04.2.html>

-!- Static positioned elements are not affected by the top, bottom, left, and right properties.
.
.
- level 4.05 - Positioning - Fixed Positioning
.

-- position element with a fixed position (position: fixed;) is positioned 
   relative to the browser window, and will it always stays in the same place (not move)
   even if the window is scrolled.

-- The position can be specified using one or more of the properties top, right, bottom, left. 

-!- A fixed element does not leave a gap in the page where it would normally have been located.

--- example: fixed Positioning

    p.position_fixed {
        position: fixed;
        top: 40px;
        /*right: 515px;*/
        left: 8;
        color: red;
    }

--- example: fixed Positioning
    <css-4.05.1.html>
    <css-4.05.2.html>

--- example: fixed Positioning (like a nav bar / side bar)
    <css-4.05.3.html>
.
.
- level 4.06 - Positioning - Relative Positioning
.

-- A relative positioned element (position: relative;) is positioned relative to its normal position. 
   The properties top, right, bottom, left, 
   can be used to specify how the rendered box will be shifted. 


--- example: <div> Relative Positioning
    div.position_relative {
        position: relative;
        left: 30px;
        border: 3px solid #73AD21;
    }

--- example: <span> Relative Positioning
    span {
        background: green;
        color: white;
        position: relative;
        top: 150px;
        left: 50px;
    }

--- example: <img> Relative Positioning
    img {
        position: relative;
        left: 30px;
    }

-- The content of relatively positioned elements can be moved and overlap other elements, 
   but the reserved space for the element is still preserved in the normal flow.

--- example: Relative Positioning
    <css-4.06.1.1.html>
    <css-4.06.1.2.html>

--- example: Relative Positioning (image inside image)
    <css-4.06.2.1.html>

--- example: Relative Positioning <div> tag.
    <css-4.06.3.1.html>
    <css-4.06.3.2.html>

-!- This value ( position: relative;) cannot be used for 
    table cells, columns, column groups, rows, row groups, captions.
.
.
- level 4.07 - Positioning - Absolute Positioning
.

-- An absolute position element is positioned relative to the first parent element 
   that has a position other than static. 
   If no such element is found, the containing block is <html>.

-- Absolutely positioned elements are removed from the normal flow. 
   The document and other elements behave like the absolutely positioned element does not exist.

-!- Absolutely positioned elements can overlap other elements.

--- example: Absolute Positioning
    div.absolute {
        position: absolute;
        top: 80px;
        right: 0;
        width: 200px;
        height: 100px;
        border: 3px solid #73AD21;
    }

--- example: Absolute Positioning
    <css-4.07.1.html>
    <css-4.07.2.html>


--- example: Absolute Positioning - <div> tag
    <css-4.07.3.html>

--- example: Absolute Positioning - <div> tag inside <div> tag
    <css-4.07.4.html>
    <css-4.07.5.html>

--- example: fixed Positioning - <div> tag inside <div> tag
    <css-4.07.6.html>
.
.
- level 4.08 - Positioning - sticky Positioning
.

-- sticky Positioning An element with (position: sticky;) 
   is positioned based on the user's scroll position.

-- A sticky element toggles between "relative" and "fixed", depending on the scroll position. 
   It is positioned relative until a given offset position is met in the screen - 
   then it "sticks" in place (like position:fixed).

-- When elements are positioned outside the normal flow, they can overlap other elements.
   The "z-index" property specifies the stack order of an element 
   (which element should be placed in front of, or behind, the others).

--- example: sticky Positioning
    position: -webkit-sticky;
    position: sticky;

--- example: sticky Positioning
    <css-4.08.1.html>

--- example: sticky Positioning - transperet
    <css-4.08.2.html>

--- example: sticky Positioning - not transperet
    <css-4.08.3.html>

--- example: 2 boxes - red box overlaps the blue box
    <css-4.08.4.html>
 
-!- The red box overlaps the blue box, 
    because it was placed later in the HTML markup. 
    The z-index property can change this order.
.
.
-- Assigning the z-index Property

--- Assigning a higher "z-index" value to the blue div 
    and a lower "z-index" value to the red div will result in the following:

-!- The z-index works only on positioned elements 
    (position:absolute, position:relative, position:fixed).

--- example: 2 boxes - z-index Property (blue box overlaps the red box)
    <css-4.08.5.html>


    .blue {
    z-index: 3; 
    position: relative;
    }

    .red {
    z-index: 2;
    position: relative;
    }

.
.
-- all 

-- All CSS Positioning Properties
    Property	Description
    bottom	Sets the bottom margin edge for a positioned box

    clip	Clips an absolutely positioned element

    https://www.w3schools.com/cssref/pr_pos_clip.asp

    left --- Sets the left margin edge for a positioned box
    position --- Specifies the type of positioning for an element
    right --- Sets the right margin edge for a positioned box
    top	--- Sets the top margin edge for a positioned box


-- margin:
--- margin: auto;  /*align center*/
    margin: 50px auto 0px auto; /*margin: up, right, bottom left*/
--- margin:inherit  /**/
--- margin:initial  /**/
--- margin:unset    /**/
.
.
-- z-index


- z-index -- Sets the stack order of an element

-- sticky Positioning - transperet
    z-index: -1;

--- example: sticky Positioning - transperet
    <css-4.08.2.html>


-- sticky Positioning - not transperet

--- example: sticky Positioning - not transperet
    <css-4.08.3.html>

--- link
    < https://www.w3schools.com/css/css_positioning.asp >
    < https://www.w3schools.com/cssref/pr_pos_z-index.asp >
    < https://www.w3schools.com/css/css_positioning.asp >
.
.
- level 4.09 - Positioning - Floating
.

-- The CSS float property specifies how an element should float.

--- float: left;

--- example: float : left
    <css-4.09.1.html>

    img {
        float: left;
        width: 120px;
        height: 120px;
        margin-right: 20px;
    }

    p {
        width:320px;
        float: left;
    }


-- float: right;

--- example: float : right
    <css-4.09.2.html>

    img {
        float: right;
        width: 120px;
        height: 120px;
        margin-left: 20px;
    }
    p {
        width: 320px;
        float: right;
    }


--- example: float: left  (x2)
    <css-4.09.3.html>

    img {
        float: left;
        width: 120px;
        height: 120px;
        margin-right: 20px;
        margin-left: 20px;
    }
    p {
        float: left;
        width: 350px;
    }


--- example: div float: right -and- div float: left.
    <css-4.09.4.html>

    .float-right img {
        float: right;
        width: 120px;
        height: 120px;
        margin-right: 20px;
        margin-left: 20px;
    }

    .float-right {
        float: right;
        width: 350px;
    }

    .float-left img {
        float: left;
        width: 120px;
        height: 120px;
        margin-right: 20px;
        margin-left: 20px;
    }

    .float-left p {
        float: left;
        width: 350px;
    }


--- example: float:right + text under
    <css-4.09.5.html>

--- example: float:left + text big letter.
    <css-4.09.6.html>

.
.
- level 4.10 - Positioning - Floating - Clearing the Float
.

-- Elements that come after the floating element will flow around it. 
   To avoid this, use the clear property.

-- The clear property specifies the sides of an element where 
   other floating elements are not allowed to be.

-- if we set the float property to the div, 
   only the paragraph that comes after the div will be wrapped around the image.

--- example: Floating - without - Clearing the Float
    <css-4.10.1.html>

    body
    {
        width: 30%;
    }

    .floating {
        float: right;
    }


-!- Use the values: "right", "left", "both"
    to specify the sides of an element where other floating elements 
    are not allowed to be. 

-!- The default value is "none", which allows floating elements on both sides.

--- example: Positioning - Floating - Clearing the Float (clear: both;)
    <css-4.10.2.html>

    body {
        width:38%;
    }

    .floating {
        float: right;
    }

    .clearing {
        clear: both;
    }

    img {
        width :150px;
    }    


--- example: Positioning - Floating - Clearing the Float (clear: left;)
    <css-4.10.3.html>

    body {
        width:38%;
    }

    .floating {
        float: right;
        margin: 12px;
    }

    .clearing {
        clear: left;
    }

    img {
        width :150px;
    }


--- example: Positioning - Floating - Clearing the Float (clear: right;)
    <css-4.10.4.html>

    body {
        width:38%;
    }

    .floating {
        float: left;
        margin: 12px;
    }

    .clearing {
        clear: right;
    }

    img {
        width :150px;
    }


--- example: Positioning - Floating - Clearing the Float (clear: left;)
    <css-4.10.5.html>

    body {
        width: 38%;
    }

    .div1 {
        float: left;
        width: 100px;
        height: 50px;
        margin: 10px;
        border: 3px solid #73AD21;
    }

    .div2 {
        border: 1px solid red;
        clear:none;
    }

    .div3 {
        float: left;
        width: 100px;
        height: 50px;
        margin: 10px;
        border: 3px dashed #73AD21;
    }

    .div4 {
        border: 1px solid red;
        clear: left;
    }


-!- rtfm: css float
    < https://www.w3schools.com/css/css_float.asp >
.
.
- level 4.11 - Positioning - The overflow Property
.

-- every element on the page is a box. 
   If the height of the box is not set, the height of that box will grow 
   as large as necessary to accommodate the content. 

-- The CSS overflow property specifies the behavior that occurs 
   when an element's content overflows the element's box.

--- example: overflow (height)

    div {
        width: 1800px;
        height: 150px;
        background-color: LightBlue;
        float: left;
    }


--- example: overflow (height)
    <css-4.11.1.html>

    div {
            width: 180px;
            height: 150px;
            background-color: LightBlue;
            float: left;
            overflow: visible;
        }
.
.
- The overflow Property Values

-- The overflow property: 

--- visible (the default value)
    overflow: visible;
    all the overflow content is visible.

--- scroll - 
    overflow: scroll;
    a scrollbar is added to the clipped overflow.

--- hidden -
    The overflow is clipped, and the rest of the content will be invisible.

--- auto - 
    a scroll-bar should be added to make it possible to see the rest of the content.


--- example: overflow: visible;
    <css-4.11.1.html>

    div {
        width: 180px;
        height: 150px;
        background-color: LightBlue;
        float: left;
        overflow: visible;
    }


--- example: overflow: scroll;
    <css-4.11.2.html>

    div {
        width: 180px;
        height: 150px;
        background-color: LightBlue;
        float: left;
        overflow: scroll;
    }


--- example: overflow: hidden;
    <css-4.11.3.html>

    div {
        width: 180px;
        height: 150px;
        background-color: LightBlue;
        float: left;
        overflow: hidden;
    }


--- example: overflow: auto;
    <css-4.11.4.html>

    div {
        width: 180px;
        height: 150px;
        background-color: LightBlue;
        float: left;
        overflow: auto;
    }


--- example: overflow: auto; (with image)
    <css-4.11.5.html>

    div {
        /* border: 3px solid #4CAF50; */
        border-style: dashed;
        padding: 5px;
    }

    .img1 {
        float: right;
        width: 150px;
    }

    .clearfix {
        overflow: auto;
        float:right;
    }

    .img2 {
        float: right;
        width: 150px;
    }




:::temp links:::

https://www.w3schools.com/css/css_float.asp

https://www.w3schools.com/css/tryit.asp?filename=trycss_layout_clearfix

https://www.w3schools.com/css/tryit.asp?filename=trycss_float2

https://www.w3schools.com/css/tryit.asp?filename=trycss_float3

https://www.w3schools.com/css/tryit.asp?filename=trycss_float4

https://www.w3schools.com/css/tryit.asp?filename=trycss_layout_webpage

https://www.w3schools.com/css/tryit.asp?filename=trycss_float5

https://www.w3schools.com/css/tryit.asp?filename=trycss_float_images_side

http://127.0.0.1:5500/01-css/level-4/css-4.10.5.html



/?/?/?/?/?/?/?/?/?/?/?/?/?/?/
.
CSS ::before Selector
https://www.w3schools.com/cssref/pr_gen_content.asp
.
CSS content Property
https://www.w3schools.com/cssref/sel_before.asp
.
CSS ::after Selector
https://www.w3schools.com/cssref/sel_after.asp
.
+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+



.
.
+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+
.
All CSS Float Properties

box-sizing	
Defines how the width and height of an element are calculated: should they include padding and borders, or not

clear	
Specifies what elements can float beside the cleared element and on which side

float	
Specifies how an element should float

overflow	
Specifies what happens if content overflows an element's box

overflow-x	
Specifies what to do with the left/right edges of the content if it overflows the element's content area

overflow-y	
Specifies what to do with the top/bottom edges of the content if it overflows the element's content area
.
+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+



